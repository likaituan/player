<style>
    .player {
        width: 100%;
        height: 120px;
    }

    ul.player-left {
        float: left;
        height: 100%;
        width: calc(100% - 150px);
        padding: 0;
        margin: 0;
    }

    .player-left > li {
        float: left;
        width: 100%;
        height: 70px;
        text-align: center;
        list-style: none;
    }

    .player-time {
        width: 100%;
        line-height: 20px;
    }

    .player-time > input {
        width: 90%;
        margin: 25px 0 0;
        /*background: linear-gradient(#61bd12, #61bd12) no-repeat, #ddd;*/
        background: #61bd12;
        color: #61bd12;
        height: 3px;
    }

    .player-button > div{
        float:left;
        display: inline-block;
        text-align: center;
        width: 25%;
        height: 32px;
        margin: 14px 0;
        border: 0;
        cursor: pointer;
    }

    .player-button > div > span{
        display: inline-block;
        width: 32px;
        height: 32px;
    }

    .btn-play {
        background: url("./images/play32.png") no-repeat;
    }

    .btn-pause {
        background: url("./images/pause32.png") no-repeat;
    }

    .btn-prev {
        background: url("./images/prev32.png") no-repeat;
    }

    .btn-next {
        background: url("./images/next32.png") no-repeat;
    }

    .btn-mode-order {
        background: url("./images/mode-order.png") no-repeat;
    }

    .btn-mode-random {
        background: url("./images/mode-random.png") no-repeat;
    }

    .btn-mode-one {
        background: url("./images/mode-one.png") no-repeat;
    }

    .player-right1 {
        float: left;
        width: 50px;
        text-align: center;
    }

    .player-right1 > div {
        width: 100%;
        height: 70px;
    }

    .player-right1 > div:last-child {
        height: 50px;
    }

    .player-right1 > div > input {
        transform: rotate(270deg);
        margin-left: -15px;
        margin-top: 40px;
        width: 50px;
    }

    .player-right1 > div > span {
        display: block;
        width: 32px;
        height: 32px;
    }

    .btn-mute {
        background: url("./images/mute.png") no-repeat;
        margin-top: 14px;
    }

    .btn-volume {
        background: url("./images/volume.png") no-repeat;
        margin-top: 14px;
    }

    .player-right2 {
        float: right;
        width: 100px;
    }

    .player-album-pic {
        width: 100px;
        height: 100px;
    }

    .player-album-title {
        text-align: center;
        height: 40px;
        overflow: hidden;
    }
</style>

<template>
    <div class="player">
        <ul class="player-left">
            <li class="player-time">
                <input type="range" max="{this.totalTime}" value="{this.currentTime}" data-event="mousedown > setTimeStart ; mouseup > setTime" />
                <div>{this.currentTime | s2ms} / {this.totalTime | s2ms}</div>
            </li>
            <li class="player-button">
                {if this.showGo}
                <div><span class="btn-prev" data-event="goPrev" title="上一曲"></span></div>
                {/if}
                <div>
                    {if this.isPlay}
                    <span class="btn-pause" data-event="doPause" title="暂停"></span>
                    {else}
                    <span class="btn-play" data-event="doPlay" title="播放"></span>
                    {/if}
                </div>
                {if this.showGo}
                <div><span class="btn-next" data-event="goNext" title="下一曲"></span></div>
                {/if}
                <div><span class="btn-mode-{this.mode}" data-event="changeMode" title="{this.modeTitle}"></span></div>
            </li>
        </ul>
        <div class="player-right1">
            <div>
                <input type="range" step="0.01" max="1" value="{this.audio ? this.audio.volume : 1}" data-event="mouseup > setVolume" />
            </div>
            <div data-event="changeMute" title="静音开关">
                {if this.audio && this.audio.muted}
                <span class="btn-mute"></span>
                {else}
                <span class="btn-volume"></span>
                {/if}
            </div>
        </div>
        <div class="player-right2">
            <img class="player-album-pic" src="{this.current.pic}" />
            <div class="player-album-title">专辑: {this.current.album}</div>
        </div>
        <div class="clear"></div>
    </div>
</template>


<script type="text/ecmascript-6">
let time = require('ifun/time');
const ModeList = ['order', 'random', 'one'];
const ModeTitleMaps = {
    order: '顺序播放',
    random: '随机播放',
    one: '单曲循环'
};

module.exports = {
    $data: {
        currentTime: 0,
        totalTime: 0,
        isPlay: true,
        mode: 'order',
        current: {}
    },
    $computed: {
        playPercent () {
            if (this.totalTime > 0) {
                return Math.floor(this.playTime / this.totalTime * 100);
            }
            return 0;
        },
        showGo () {
            let view = this.$sibling('playlist');
            return view.isMounted && view.songList.length > 1;
        },
        modeTitle () {
            return ModeTitleMaps[this.mode]
        }
    },
    $hooks: {
        // 刷新事件
        onRender () {
            if (!this.audio) {
                this.audio = document.createElement('audio');
                this.audio.autoplay = true;
                this.setAudio();
                this.setKeyboard();
            }
        }
    },
    $methods: {
        // 设置Audio
        setAudio () {
            this.audio.addEventListener("timeupdate", x => this.showStatus(x));
            this.audio.addEventListener("ended", x => this.goMode());
            this.audio.addEventListener("error", e => this.showErr(e));
        },

        // 设置按键
        setKeyboard () {
            document.body.addEventListener('keydown', x => {
                x.altKey && x.key === 'ArrowLeft' && this.goPrev();
                x.altKey && x.key === 'ArrowRight' && this.goNext();
                x.altKey && x.key === 'ArrowUp' && this.changeVolume(0.05);
                x.altKey && x.key === 'ArrowDown' && this.changeVolume(-0.05);
            });
        },

        // 展示状态
        showStatus () {
            if (!this.timing) {
                this.currentTime = Math.floor(this.audio.currentTime);
                this.$sibling('lyric').updateTime(this.currentTime);
            }
        },

        // 播放出错处理
        showErr (err) {
            // console.log({err});
            let isUpdate = window.confirm('歌曲已过期, 是否更新?');
            if (isUpdate) {
                /*
                let view = this.$sibling('playlist');
                view.resetSong(view.playIndex);
                */
                let view = this.$sibling('search');
                view.addSong(this.current.songId);
            }
        },

        // 切歌
        changeSong (item) {
            this.current = item;
            this.currentTime = 0;
            this.totalTime = item.length || 0;
            this.audio.src = item.mp3;
            //this.audio.play();
        },

        // 切换播放模式
        changeMode () {
            let index = ModeList.findIndex(x => x === this.mode) + 1;
            if (index > 2) {
                index = 0;
            }
            this.mode = ModeList[index];
        },

        // 切换静音
        changeMute () {
            this.audio.muted = !this.audio.muted;
        },

        // 调整音量
        changeVolume (num) {
            num += this.audio.volume;
            num = Math.max(num, 0);
            num = Math.min(num, 1);
            this.audio.volume = num;
        },

        // 设置音量
        setVolume () {
            this.audio.volume = this.element.value;
        },

        // 调整时间开始
        setTimeStart () {
            this.timing = true;
        },

        // 调整时间
        setTime () {
            this.timing = false;
            this.audio.currentTime = this.element.value;
        },

        // 播放
        doPlay () {
            this.isPlay = true;
            this.audio.play();
        },

        // 暂停
        doPause (){
            this.isPlay = false;
            this.audio.pause();
        },

        // 上一首
        goPrev () {
            this.$sibling('playlist').goPrev();
        },

        // 下一首
        goNext () {
            this.$sibling('playlist').goNext();
        },

        // 根据模式自动跳转
        goMode () {
            this.$sibling('playlist').goMode(this.mode);
        }
    },
    $format: {
        s2ms: time.s2ms,
        ms2s: time.ms2s
    }
};
</script>